from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import FSInputFile
from aiogram import F, Router
from aiogram.enums import ParseMode, ChatAction
import asyncio
from aiogram.fsm.context import FSMContext
from app.states.state import RegisterState, UserState, SettingsState, AdminState
from app.keyboards.default import main_markup, share_contact_btn, settings_markup, back_btn, main_markup_for_admin
from app.keyboards.inline import get_month_markup
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove
from app.database import db
from environs import Env
from aiogram import Bot
import os
from excel import get_excel

# environs kutubxonasidan foydalanish
env = Env()
env.read_env()

ADMINS = env.list("ADMINS")
BOT_TOKEN = env.str("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)

user = Router()


def get_month_names():
    folder_path = 'D:\\Telegram bot\\oylik_bot\\app\\files'
    excel_files = [f for f in os.listdir(folder_path) if f.endswith(('.xlsx', '.xls'))]
    excel_files_names = []
    for i in excel_files:
        name, s = i.split('.')
        excel_files_names.append(name)
    return excel_files_names

def get_excel_paths():
    folder_path = 'D:\\Telegram bot\\oylik_bot\\app\\files'
    excel_files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.endswith(('.xlsx', '.xls'))]
    return excel_files

@user.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = await db.select_user(message.from_user.id)
    if user:
        if str(message.from_user.id) in ADMINS:
            await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup_for_admin, parse_mode='html')
            await state.set_state(UserState.main)
        else:
            await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup, parse_mode='html')
            await state.set_state(UserState.main)
    else:
        await message.answer("<b>–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏—à —É—á—É–Ω üëá —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥</b>", reply_markup=share_contact_btn, parse_mode='html')
        await state.set_state(RegisterState.phone_number)

@user.message(RegisterState.phone_number)
async def get_phone_number(message: Message, state: FSMContext):
    if message.contact:
        await message.answer("<b>üì§ –ñ–®–®–ò–† –Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥</b>\n\n<i>–ñ–®–®–ò–† 14 —Ç–∞ —Ä–∞“õ–∞–º–¥–∞–Ω –∏–±–æ—Ä–∞—Ç –±—û–ª–∞–¥–∏</i>", reply_markup=ReplyKeyboardRemove(), parse_mode='html')
        await state.set_data({'phone_number': message.contact.phone_number})
        await state.set_state(RegisterState.jshshir)
    else:
        await message.answer("<b>‚ùóÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∫–∞–º–∏–Ω–∏ —Ñ–∞–∫–∞—Ç–≥–∏–Ω–∞ –ø–∞—Å—Ç–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥ –æ—Ä–≥–∞–ª–∏ —é–±–æ—Ä–∏–Ω–≥üëá</b>", reply_markup=share_contact_btn, parse_mode='html')

@user.message(RegisterState.jshshir)
async def get_jshshir(message: Message, state: FSMContext):
    if message.text and message.text.isdigit() and len(message.text) == 14:
        if str(message.from_user.id) in ADMINS:
            await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup_for_admin, parse_mode='html')
        else:
            await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup, parse_mode='html')
        phone_number = (await state.get_data())['phone_number']
        await db.add_user(message.from_user.id, phone_number, message.text)
        await state.set_state(UserState.main)
    else:
        await message.answer("<b>üì§ –ñ–®–®–ò–† –Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥</b>\n\n<i>–ñ–®–®–ò–† 14 —Ç–∞ —Ä–∞“õ–∞–º–¥–∞–Ω –∏–±–æ—Ä–∞—Ç –±—û–ª–∞–¥–∏</i>", reply_markup=ReplyKeyboardRemove(), parse_mode='html')


@user.message(UserState.main)
async def main_state_handler(message: Message, state: FSMContext):
    if message.text:
        if message.text == "‚öôÔ∏è –°–æ–∑–ª–∞–º–∞–ª–∞—Ä":
            await message.answer("<b>–é–∑–≥–∞—Ä—Ç–∏—Ä–º–æ“õ—á–∏ –±—û–ª–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=settings_markup, parse_mode="html")
            await state.set_state(UserState.settings)
        
        if message.text == "üì§ –§–∞–π–ª —é–∫–ª–∞—à" and str(message.from_user.id) in ADMINS:
            await message.answer("<b>–û–π–ª–∏–∫ —Ö–∞–∫–∏–¥–∞ –º–∞–ª—É–º–æ—Ç–Ω–∏ –µ—Ö—Å–µ–ª—å —à–∞–∫–ª–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥:</b>\n\n –ú–∞—Å–∞–ª–∞–Ω: 2024-11.xlsx", reply_markup=back_btn, parse_mode="html")
            await state.set_state(AdminState.upload_file)

        if message.text == "üßæ –ò—à “≥–∞“õ–∏ —Ç—û“ì—Ä–∏—Å–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à":
            markup = get_month_markup(get_month_names(), 'r')
            await message.answer("<b>–ö—û—Ä–º–æ“õ—á–∏ –±—û–ª–≥–∞–Ω –¥–∞–≤—Ä–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥! üìù\n–ú–∏—Å–æ–ª —É—á—É–Ω: 2021-09</b>", parse_mode='html', reply_markup=back_btn)
            await message.answer("<b>–Å–∫–∏ “õ—É–π–∏–¥–∞–≥–∏–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", parse_mode='html', reply_markup=markup)
            await state.set_state(UserState.get_month)
        
        if message.text == "üóë –§–∞–π–ª —û—á–∏—Ä–∏—à" and str(message.from_user.id) in ADMINS:
            files = get_month_names()
            txt = '<b>–ú–∞–≤–∂—É–¥ —Ñ–∞–π–ª–ª–∞—Ä:</b>\n\n'
            for file in files:
                txt += f"<code>{file}</code>,   "
            txt += "\n\n<b>–é—á–∏—Ä–º–æ–∫—á–∏ –±—û–ª–≥–∞–Ω —Ñ–∞–π–ª–Ω–∏–Ω–≥ –Ω–æ–º–∏–Ω–∏ —ë–∑–∏–Ω–≥</b>"
            await message.answer(txt, parse_mode='html', reply_markup=back_btn)
            await state.set_state(AdminState.delete_file)
    else:
        if str(message.from_user.id) in ADMINS:
            await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup_for_admin, parse_mode='html')
        else:
            await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup, parse_mode='html')


@user.message(AdminState.upload_file)
async def admin_state_handler(message: Message, state: FSMContext):
    if message.document:
        file_name, file_type = message.document.file_name.split('.')
        file_id = message.document.file_id
        if file_type in ['xls', 'xlsx']:
            file = await bot.get_file(file_id)
            file_path = file.file_path
            destination = os.path.join("app/files", message.document.file_name)
            await bot.download_file(file_path, destination)
            await message.answer(f"<b>{message.document.file_name} —Å–∞–∫–ª–∞–Ω–¥–∏‚úÖ</b>", parse_mode='html')
            
        else:
            await message.answer("<b>–û–π–ª–∏–∫ —Ö–∞–∫–∏–¥–∞ –º–∞–ª—É–º–æ—Ç–Ω–∏ –µ—Ö—Å–µ–ª—å —à–∞–∫–ª–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥:</b>\n\nMasalan: 2024-11.xlsx", reply_markup=back_btn, parse_mode="html")
    elif message.text:
        if message.text == "‚¨ÖÔ∏è –û—Ä“õ–∞–≥–∞":
            if str(message.from_user.id) in ADMINS:
                await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup_for_admin, parse_mode='html')
                await state.set_state(UserState.main)
            else:
                await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup, parse_mode='html')
                await state.set_state(UserState.main)
    else:
        await message.answer("<b>–û–π–ª–∏–∫ —Ö–∞–∫–∏–¥–∞ –º–∞–ª—É–º–æ—Ç–Ω–∏ –µ—Ö—Å–µ–ª—å —à–∞–∫–ª–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥:</b>\n\n –ú–∞—Å–∞–ª–∞–Ω: 2024-11.xlsx", reply_markup=back_btn, parse_mode="html")


@user.message(AdminState.delete_file)
async def admin_state_handler2(message: Message, state: FSMContext):
    files = get_month_names()
    if message.text and message.text in files:
        file_paths = get_excel_paths()
        file_path = None
        for path in file_paths:
            if message.text in path:
                file_path = path
                break
        if file_path:
            try:
                os.remove(path)
                await message.answer("<b>‚úÖ –§–∞–π–ª —û—á–∏—Ä–∏–ª–¥–∏ üóë</b>", parse_mode='html')
                files = get_month_names()
                txt = '<b>–ú–∞–≤–∂—É–¥ —Ñ–∞–π–ª–ª–∞—Ä:</b>\n\n'
                for file in files:
                    txt += f"<code>{file}</code>,   "
                txt += "\n\n<b>–é—á–∏—Ä–º–æ–∫—á–∏ –±—û–ª–≥–∞–Ω —Ñ–∞–π–ª–Ω–∏–Ω–≥ –Ω–æ–º–∏–Ω–∏ —ë–∑–∏–Ω–≥</b>"
                await message.answer(txt, parse_mode='html', reply_markup=back_btn)
            except:
                await message.answer(f"<b>{message.text} –Ω–æ–º–ª–∏ —Ñ–∞–π–ª–Ω–∏ —û—á–∏—Ä–∏–± –±—û–ª–º–∞–¥–∏üôÅ<b>", parse_mode='html', reply_markup=back_btn)
        else:
            await message.answer(f"<b>{message.text} –Ω–æ–º–ª–∏ —Ñ–∞–π–ª —Ç–æ–ø–∏–ª–º–∞–¥–∏üôÅ</b>", parse_mode='html', reply_markup=back_btn)
    elif message.text and message.text == "‚¨ÖÔ∏è –û—Ä“õ–∞–≥–∞":
        if str(message.from_user.id) in ADMINS:
            await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup_for_admin, parse_mode='html')
        else:
            await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup, parse_mode='html')
        await state.set_state(UserState.main)
    
    else:
        files = get_month_names()
        txt = '<b>–ú–∞–≤–∂—É–¥ —Ñ–∞–π–ª–ª–∞—Ä:</b>\n\n'
        for file in files:
            txt += f"<code>{file}</code>,   "
        txt += "\n\n<b>–é—á–∏—Ä–º–æ–∫—á–∏ –±—û–ª–≥–∞–Ω —Ñ–∞–π–ª–Ω–∏–Ω–≥ –Ω–æ–º–∏–Ω–∏ —ë–∑–∏–Ω–≥</b>"
        await message.answer(txt, parse_mode='html', reply_markup=back_btn)

@user.message(UserState.settings)
async def settings_state_handler(message: Message, state: FSMContext):
    if message.text and message.text == "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à":
        await message.answer("<b>–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏—à —É—á—É–Ω üëá —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥</b>", reply_markup=share_contact_btn, parse_mode='html')
        await state.set_state(SettingsState.phone_number)
    elif message.text and message.text == "üîè –ñ–®–®–ò–† –Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à":
        await message.answer("<b>üì§ –ñ–®–®–ò–† –Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥</b>\n\n<i>–ñ–®–®–ò–† 14 —Ç–∞ —Ä–∞“õ–∞–º–¥–∞–Ω –∏–±–æ—Ä–∞—Ç –±—û–ª–∞–¥–∏</i>", reply_markup=back_btn, parse_mode='html')
        await state.set_state(SettingsState.jshshir)
    elif message.text == "‚¨ÖÔ∏è –û—Ä“õ–∞–≥–∞":
        if str(message.from_user.id) in ADMINS:
            await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup_for_admin, parse_mode='html')
        else:
            await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup, parse_mode='html')
        await state.set_state(UserState.main)
    else:
        await message.answer("<b>–é–∑–≥–∞—Ä—Ç–∏—Ä–º–æ“õ—á–∏ –±—û–ª–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=settings_markup, parse_mode="html")




@user.message(SettingsState.phone_number)
async def edit_phone_number(message: Message, state: FSMContext):
    if message.contact:
        await db.update_user_phone(message.from_user.id, message.contact.phone_number)
        if str(message.from_user.id) in ADMINS:
            await message.answer("<b>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏ ‚úÖ</b>", reply_markup=main_markup_for_admin, parse_mode='html')
        else:
            await message.answer("<b>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏ ‚úÖ</b>", reply_markup=main_markup, parse_mode='html')
        await state.set_state(UserState.main)
    else:
        await message.answer("<b>‚ùóÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∫–∞–º–∏–Ω–∏ —Ñ–∞–∫–∞—Ç–≥–∏–Ω–∞ –ø–∞—Å—Ç–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥ –æ—Ä–≥–∞–ª–∏ —é–±–æ—Ä–∏–Ω–≥üëá</b>", reply_markup=share_contact_btn, parse_mode='html')


@user.message(SettingsState.jshshir)
async def edit_jshshir(message: Message, state: FSMContext):
    if message.text and message.text.isdigit() and len(message.text) == 14:
        await db.update_user_jshshir(message.from_user.id, message.text)
        if str(message.from_user.id) in ADMINS:
            await message.answer("<b>üì§ –ñ–®–®–ò–† —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏‚úÖ</b>", reply_markup=main_markup_for_admin, parse_mode='html')
        else:
            await message.answer("<b>üì§ –ñ–®–®–ò–† —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏‚úÖ</b>", reply_markup=main_markup, parse_mode='html')
        await state.set_state(UserState.main)
    elif message.text and message.text == "‚¨ÖÔ∏è –û—Ä“õ–∞–≥–∞":
        await message.answer("<b>–é–∑–≥–∞—Ä—Ç–∏—Ä–º–æ“õ—á–∏ –±—û–ª–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=settings_markup, parse_mode="html")
        await state.set_state(UserState.settings)
    else:
        await message.answer("<b>üì§ –ñ–®–®–ò–† –Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥</b>\n\n<i>–ñ–®–®–ò–† 14 —Ç–∞ —Ä–∞“õ–∞–º–¥–∞–Ω –∏–±–æ—Ä–∞—Ç –±—û–ª–∞–¥–∏</i>", reply_markup=back_btn, parse_mode='html')


@user.message(UserState.get_month)
async def get_month_handler(message: Message, state: FSMContext):
    if message.text:
        months = get_month_names()
        if message.text in months:
            user = await db.select_user(message.from_user.id)
            call_data = message.text
            yil, oy = call_data.split('-')
            paths = get_excel_paths()
            excel_path = ''
            for path in paths:
                if call_data in path:
                    excel_path = path
                    break
            data = get_excel(excel_path)
            oylar = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
            user_data = None
            for i in data:
                if i[1]!="nan" and i[1]!=" ":
                    i[1] = int(float(i[1]))
                else:
                    i[1] = 0

                if i[4]!="nan" and i[4]!=" ":
                    i[4] = int(float(i[4]))
                else:
                    i[4] = 0

                if i[5]!='nan' and i[5]!=" ":
                    i[5] = float(i[5])
                else:
                    i[5] = 0

                if i[6]!="nan" and i[6]!=' ':
                    i[6] = int(float(i[6]))
                else:
                    i[6] = 0

                if i[7]!="nan" and i[7]!=' ':
                    i[7] = float(i[7])
                else:
                    i[7] = 0

                if i[8]!="nan" and i[8]!=' ':
                    i[8] = float(i[8])
                else:
                    i[8] = 0

                if i[9]!="nan" and i[9]!=' ':
                    i[9] = int(float(i[9]))
                else:
                    i[9] = 0

                if i[10]!="nan" and i[10]!=' ':
                    i[10] = int(float(i[10]))
                else:
                    i[10] = 0

                if i[11]!="nan" and i[11]!=' ':
                    i[11] = int(float(i[11]))
                else:
                    i[11] = 0

                if i[12]!="nan" and i[12]!=' ':
                    i[12] = int(float(i[12]))
                else:
                    i[12] = 0

                if i[13]!="nan" and i[13]!=' ':
                    i[13] = int(float(i[13]))
                else:
                    i[13] = 0
                if int(user.jshshir) == i[1]:
                    user_data = i
                    text = (
                        f"–ò—Å–º–∏ –≤–∞ —Ñ–∞–º–∏–ª–∏—è—Å–∏: <b>{i[2]}</b>\n"
                        f"–õ–∞–≤–æ–∑–∏–º–∏: <b>{i[3]}</b>\n\n"
                        f"<b>{yil} –π–∏–ª {oylar[int(oy)-1]} –æ–π–∏ —É—á—É–Ω:</b>\n"
                        f"- –õ–∞–≤–æ–∑–∏–º –æ–∫–ª–∞–¥–∏: <b>{f'{i[4]:,}'.replace(',', ' ')}</b> —Å—û–º\n"
                        f"- –ü–æ–¥—ä–µ–º–Ω—ã–π –±–∞–ª–ª: <b>{i[5]} –±–∞–ª–ª</b>\n"
                        f"- –ü–æ–¥—å–µ–º–Ω—ã–π –æ–∫–ª–∞–¥: <b>{f'{i[6]:,}'.replace(',', ' ')} —Å—û–º</b>\n"
                        f"- –ò—à–ª–∞–Ω–≥–∞–Ω —Å–æ–∞—Ç: <b>{i[7]} —Å–æ–∞—Ç</b>\n"
                        f"- –í—ã—Å–ª—É–≥–∞ –ª–µ—Ç —Å—Ç–∞–∂–∏: <b>{i[8]}  –π–∏–ª ( {i[9]}% –æ–∫–ª–∞–¥–¥–∞–Ω —Ñ–æ–∏–∑)</b>\n"
                        f"- –í—ã—Å–ª—É–≥–∞ –ª–µ—Ç —É—Å—Ç–∞–º–∞—Å–∏: <b>{f'{i[10]:,}'.replace(',', ' ')} —Å—û–º</b>\n"
                        f"- –ñ–∞–º–∏ “≥–∏—Å–æ–±–ª–∞–Ω–≥–∞–Ω –∏—à “≥–∞“õ–∏: <b>{f'{i[11]:,}'.replace(',', ' ')} —Å—û–º</b>\n"
                    )
                    if int(i[12]) != 0:
                        text += (
                            f"- –ñ–∞—Ä–∏–º–∞–ª–∞—Ä: <b>{f'{i[12]:,}'.replace(',', ' ')} —Å—û–º</b>\n"
                        )
                    if int(i[13]) != 0:
                        text += (
                            f"- –ö–æ—Ä—Ö–æ–Ω–∞–≥–∞ –∫—Ä–µ–¥–∏—Ç —Ç—û–ª–æ–≤–∏: <b>{f'{i[13]:,}'.replace(',', ' ')} —Å—û–º</b>"
                        )
                    await message.answer(text, parse_mode='html', reply_markup=back_btn)
                    break
            if user_data is None:
                await message.answer("<b>–ö—û—Ä—Å–∞—Ç—ã–ª–≥–∞–Ω –ñ–®–®–ò–† –≥–∞ –æ–∏–¥ —Ö–µ—á –∫–∞–Ω–¥–∞–π –º–∞—å–ª—É–º–æ—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏üôÅ\n\nHR –≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç –∫–∏–ª–∏–Ω–≥!</b>", parse_mode='html')
        
        elif message.text == '‚¨ÖÔ∏è –û—Ä“õ–∞–≥–∞':
            if str(message.from_user.id) in ADMINS:
                await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup_for_admin, parse_mode='html')
            else:
                await message.answer("<b>–û–π–ª–∏–∫ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá</b>", reply_markup=main_markup, parse_mode='html')
            await state.set_state(UserState.main)

        
        
        
        
        else:
            await message.answer("<b>–ö—û—Ä—Å–∞—Ç–∏–ª–≥–∞–Ω –¥–∞–≤—Ä–≥–∞ –æ–∏–¥ –º–∞—å–ª—É–º–æ—Ç–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏üôÅ</b>", parse_mode='html')
    else:
        await message.answer("<b>–ö—û—Ä–º–æ“õ—á–∏ –±—û–ª–≥–∞–Ω –¥–∞–≤—Ä–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥! üìù\n–ú–∏—Å–æ–ª —É—á—É–Ω: 2021-09</b>", parse_mode='html', reply_markup=back_btn)


@user.callback_query()
async def pick_month_state_call(call: CallbackQuery, state: FSMContext):
    months = get_month_names()
    user = await db.select_user(call.from_user.id)
    if call.data.startswith('r'):
        key, call_data = call.data.split('_')
        yil, oy = call_data.split('-')
        paths = get_excel_paths()
        excel_path = ''
        for path in paths:
            if call_data in path:
                excel_path = path
                break
        data = get_excel(excel_path)
        oylar = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
        user_data = None
        for i in data:
            if i[1]!="nan" and i[1]!=" ":
                i[1] = int(float(i[1]))
            else:
                i[1] = 0

            if i[4]!="nan" and i[4]!=" ":
                i[4] = int(float(i[4]))
            else:
                i[4] = 0

            if i[5]!='nan' and i[5]!=" ":
                i[5] = float(i[5])
            else:
                i[5] = 0

            if i[6]!="nan" and i[6]!=' ':
                i[6] = int(float(i[6]))
            else:
                i[6] = 0

            if i[7]!="nan" and i[7]!=' ':
                i[7] = float(i[7])
            else:
                i[7] = 0

            if i[8]!="nan" and i[8]!=' ':
                i[8] = float(i[8])
            else:
                i[8] = 0

            if i[9]!="nan" and i[9]!=' ':
                i[9] = int(float(i[9]))
            else:
                i[9] = 0

            if i[10]!="nan" and i[10]!=' ':
                i[10] = int(float(i[10]))
            else:
                i[10] = 0

            if i[11]!="nan" and i[11]!=' ':
                i[11] = int(float(i[11]))
            else:
                i[11] = 0

            if i[12]!="nan" and i[12]!=' ':
                i[12] = int(float(i[12]))
            else:
                i[12] = 0

            if i[13]!="nan" and i[13]!=' ':
                i[13] = int(float(i[13]))
            else:
                i[13] = 0
            if int(user.jshshir) == i[1]:
                user_data = i
                text = (
                    f"–ò—Å–º–∏ –≤–∞ —Ñ–∞–º–∏–ª–∏—è—Å–∏: <b>{i[2]}</b>\n"
                    f"–õ–∞–≤–æ–∑–∏–º–∏: <b>{i[3]}</b>\n\n"
                    f"<b>{yil} –π–∏–ª {oylar[int(oy)-1]} –æ–π–∏ —É—á—É–Ω:</b>\n"
                    f"- –õ–∞–≤–æ–∑–∏–º –æ–∫–ª–∞–¥–∏: <b>{f'{i[4]:,}'.replace(',', ' ')}</b> —Å—û–º\n"
                    f"- –ü–æ–¥—ä–µ–º–Ω—ã–π –±–∞–ª–ª: <b>{i[5]} –±–∞–ª–ª</b>\n"
                    f"- –ü–æ–¥—å–µ–º–Ω—ã–π –æ–∫–ª–∞–¥: <b>{f'{i[6]:,}'.replace(',', ' ')} —Å—û–º</b>\n"
                    f"- –ò—à–ª–∞–Ω–≥–∞–Ω —Å–æ–∞—Ç: <b>{i[7]} —Å–æ–∞—Ç</b>\n"
                    f"- –í—ã—Å–ª—É–≥–∞ –ª–µ—Ç —Å—Ç–∞–∂–∏: <b>{i[8]}  –π–∏–ª ( {i[9]}% –æ–∫–ª–∞–¥–¥–∞–Ω —Ñ–æ–∏–∑)</b>\n"
                    f"- –í—ã—Å–ª—É–≥–∞ –ª–µ—Ç —É—Å—Ç–∞–º–∞—Å–∏: <b>{f'{i[10]:,}'.replace(',', ' ')} —Å—û–º</b>\n"
                    f"- –ñ–∞–º–∏ “≥–∏—Å–æ–±–ª–∞–Ω–≥–∞–Ω –∏—à “≥–∞“õ–∏: <b>{f'{i[11]:,}'.replace(',', ' ')} —Å—û–º</b>\n"
                )
                if int(i[12]) != 0:
                    text += (
                        f"- –ñ–∞—Ä–∏–º–∞–ª–∞—Ä: <b>{f'{i[12]:,}'.replace(',', ' ')} —Å—û–º</b>\n"
                    )
                if int(i[13]) != 0:
                    text += (
                        f"- –ö–æ—Ä—Ö–æ–Ω–∞–≥–∞ –∫—Ä–µ–¥–∏—Ç —Ç—û–ª–æ–≤–∏: <b>{f'{i[13]:,}'.replace(',', ' ')} —Å—û–º</b>"
                    )
                await call.message.answer(text, parse_mode='html', reply_markup=back_btn)
                break
        if user_data is None:
            await call.message.answer("<b>–ö—û—Ä—Å–∞—Ç—ã–ª–≥–∞–Ω –ñ–®–®–ò–† –≥–∞ –æ–∏–¥ —Ö–µ—á –∫–∞–Ω–¥–∞–π –º–∞—å–ª—É–º–æ—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏üôÅ\n\nHR –≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç –∫–∏–ª–∏–Ω–≥!</b>", parse_mode='html')
    await call.answer()



@user.message()
async def no_state_handler(message: Message):
    await message.answer("–ë–æ—Ç–Ω–∏ –∏—à–≥–∞ —Ç—É—à–∏—Ä–∏—àüëá\n\n/start /start /start")